// src/lucia.d.ts

// These interfaces describe the structure of your user and session data.

// Attributes as they are stored in the 'Users' database table.
// Lucia's adapter will use this, and `createUser` expects these (excluding 'id' if auto-generated by DB).
interface DatabaseUserAttributes {
	id: string; // Required by Lucia adapter, maps to user.userId in `getUserAttributes`
	username: string;
	// email?: string; // Example: if you also store and manage email for users
}

// Attributes available on the `session.user` object.
// This is the shape returned by `Lucia.getUserAttributes()`.
interface UserSessionAttributes {
	userId: string; // Typically mapped from DatabaseUserAttributes.id
	username: string;
	// email?: string; // If you want email to be part of the user object in the session
}

// Attributes for the session table itself (e.g., 'user_sessions'),
// if you have custom columns beyond the standard ones Lucia manages.
interface DatabaseSessionAttributes {
	// e.g. country: string; // If you store session-specific data like IP or country
}

declare module "lucia" {
	// Augment the 'lucia' module with your custom types.
	// This tells Lucia about the structure of your user and session attributes.

	// Import the original Lucia type to correctly type your augmented Lucia instance.
	// This relies on TypeScript being able to resolve the 'lucia' module and its exports.
	type LuciaInstance = import("lucia").Lucia;

	interface Register {
		Lucia: LuciaInstance<DatabaseSessionAttributes, UserSessionAttributes>;
		DatabaseUserAttributes: DatabaseUserAttributes;
		DatabaseSessionAttributes: DatabaseSessionAttributes;
	}
}

// Note: TimeSpan is a utility from 'lucia' and is typically imported directly where needed.
// It's not usually part of the Register interface for augmentation.
// e.g., import { TimeSpan } from "lucia";
